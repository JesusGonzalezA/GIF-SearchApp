{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","ctg","onSubmit","type","value","onChange","target","placeholder","onClick","getGifs","category","a","queryTheme","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","class","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wNAgDeA,EArCY,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAQzCC,EAAe,SAACC,GAClBA,EAAEC,iBAEIJ,EAAWK,OAAQC,SACrBR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAItB,OACI,uBAAMO,SAAWN,EAAjB,UACI,uBACIO,KAAK,OACLC,MAAOV,EACPW,SAlBc,SAACR,GACvBF,EAAeE,EAAES,OAAOF,QAkBhBG,YAAY,2BAGhB,wBAAQC,QAASZ,EAAjB,0B,+BCjCCa,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,4DAED,wCAGJ,GACM,2CAID,WACbC,EAAa,KAJLF,EAKRG,EAZa,UAED,yCAFC,OAUA,WAVA,aAYsBD,EAZtB,aAMC,4CAND,SAcAE,MAAMD,GAdN,cAcbE,EAda,iBAeEA,EAAKC,OAfP,wBAeZC,EAfY,EAeZA,KAGDC,EAAOD,EAAKE,KAAM,SAAAC,GACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAtBtB,kBA2BZK,GA3BY,4CAAH,sDCkBLO,EAVY,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACpC,OACI,sBAAKa,UAAU,yBAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QC+BDO,EAlCQ,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECLb,SAACA,GAAc,IAAD,EAEZjB,mBAAS,CAC/B8B,OAAQ,GACRO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAd,GAAG,OAAIY,EAAS,CAClBT,OAAQH,EACRU,SAAS,SAKd,CAACpB,IAEGqB,EDVqBI,CAAazB,GAAjCa,EAH6B,EAG7BA,OAAQO,EAHqB,EAGrBA,QAMhB,OACI,sBAAKM,MAAM,WAAX,UACI,oBAAIV,UAAU,wCAAd,SAAuDhB,IAEvD,sBAAKgB,UAAU,UAAf,UACKI,GAAW,qBAAKJ,UAAU,cAExBH,EAAOJ,KAAK,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,cEWtBgB,EA9BM,WAAO,IAAD,EAEa5C,mBAAS,IAFtB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAKvB,OACI,qCACI,mCACI,8CACA,0BAGJ,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEQ8C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,YChBjC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.13d7df58.chunk.js","sourcesContent":["/*##########################################################################\r\n#  Component to add elements in the list                                   #\r\n//########################################################################*/\r\n\r\n//**************************************************************************\r\n\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n//**************************************************************************\r\n\r\nexport const AddCategory = ( { setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();   \r\n\r\n        if ( (inputValue.trim()).length) {\r\n            setCategories(ctg => [inputValue,...ctg]);         \r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit} >     \r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange= {handleInputChange}\r\n                placeholder=\"Insert a new categorie\"\r\n            />\r\n\r\n            <button onClick={handleSubmit} > Insert </button>   \r\n        </form>\r\n    )\r\n}\r\n\r\n//**************************************************************************\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n//**************************************************************************\r\n\r\nexport default AddCategory;\r\n","//**************************************************************************\r\n// This function fetch the gifs from the endpoint\r\n//**************************************************************************\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const endpoint  = 'https://api.giphy.com/v1/gifs/search?'\r\n\r\n    //Params\r\n    const limit = 10;\r\n    const queryApiKey = 'api_key=9jplbxKhPdDDXYnbjKuZ2NFJPVPnmUeW';\r\n    const theme = category;\r\n\r\n    //URL    \r\n    const queryLimit = 'limit=' + limit;\r\n    const queryTheme = 'q=' + theme;\r\n    const url = `${endpoint}${queryLimit}&&${queryTheme}&&${queryApiKey}`;\r\n    \r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    //Gifs\r\n    const gifs = data.map  (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    //Devolver la promesa\r\n    return gifs;\r\n}","/*##########################################################################\r\n#  Gif item                                                                #\r\n//########################################################################*/\r\n\r\n//**************************************************************************\r\n\r\nimport React from 'react'\r\n\r\n//**************************************************************************\r\n\r\n//**************************************************************************\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className='card animate__bounceIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n//**************************************************************************\r\nexport default GifGridItem;\r\n","/*##########################################################################\r\n#  Grid of gifs                                                            #\r\n//########################################################################*/\r\n\r\n//**************************************************************************\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n//**************************************************************************\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    //--------------------------------------------------------------------------\r\n    const { images, loading } = useFetchGifs(category);\r\n\r\n    //--------------------------------------------------------------------------\r\n    \r\n   \r\n    //--------------------------------------------------------------------------\r\n    return (\r\n        <div class='category'>  \r\n            <h2 className='animate__animated animate__fadeInDown'>{category}</h2>\r\n            \r\n            <div className='gifgrid'>\r\n                {loading && <div className='preloader'></div>}\r\n                {\r\n                   images.map( (img) => (\r\n                        <GifGridItem\r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n    //--------------------------------------------------------------------------\r\n}\r\n\r\n//**************************************************************************\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n//**************************************************************************\r\nexport default GifGrid;","//**************************************************************************\r\n// Hooks to retrieve gifs and indicate how the loading process is going on\r\n//**************************************************************************\r\n\r\nimport {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n//**************************************************************************\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        images: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(img => setState({\r\n            images: img,\r\n            loading: false\r\n        })\r\n        );\r\n        \r\n\r\n    }, [category])\r\n\r\n    return state; \r\n}","/*##########################################################################\r\n#  Main React Component                                                    #\r\n//########################################################################*/\r\n\r\n//**************************************************************************\r\n\r\nimport React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n//**************************************************************************\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    \r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>GifExpertApp</h1>\r\n                <hr />\r\n            </header>\r\n           \r\n            <AddCategory setCategories= {setCategories} />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\n//**************************************************************************\r\nexport default GifExpertApp;","/*##########################################################################\n#  Main archive.                                                           #\n#  It renders the application.                                             #\n//########################################################################*/\n\n//**************************************************************************\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './styles/index.css';\nimport './styles/icons.css'\n//**************************************************************************\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n//--------------------------------------------------------------------------\n\n"],"sourceRoot":""}